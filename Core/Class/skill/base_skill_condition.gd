extends Base
class_name BaseSkillCondition
# This is the base class for the skill conditions
# Skill conditions are conditions that a character needs to meet to use a skill
# It's not recommended to use this class directly, but to inherit from it
# [br]
# This class contains the basic properties that a skill condition should have
# All the functions in this class should be overridden in the child classes to make them work properly
# [br]	
# If you want to create a property that can be edited in the editor, 
# you should create a new property in the child class and prefix the name with "export_" (e.g. var export_my_property: int = 0)

var lua_script: String
var lua_loader: LuaLoader
var lua_api: LuaAPI

var id: String = "" # Condition's ID - This will be automatically generated by the ConditionRegister

var name: String = "" # Condition's name (e.g. "Has enough MP")
var description: String = "" # Condition's description (e.g. "The character needs to have at least 10 MP to use this skill")

var exported_value: Dictionary = {} # Values that will be shown in the GUI when editing this

func _init(_lua_script: String):
	lua_script = _lua_script
	lua_loader = LuaLoader.new(lua_script)
	lua_api = lua_loader.get_api()
	
	lua_api.push_variant("getID", _lua_get_id)
	lua_api.push_variant("getName", _lua_get_name)
	lua_api.push_variant("getDescription", _lua_get_description)
	lua_api.push_variant("setID", _lua_set_id)
	lua_api.push_variant("setName", _lua_set_name)
	lua_api.push_variant("setDescription", _lua_set_description)
	
	# Exported
	lua_api.push_variant("getExports", _lua_get_exporteds)
	lua_api.push_variant("getExport", _lua_get_export)
	lua_api.push_variant("addExport", _lua_add_export)
	
	# Load lua
	if !lua_loader.load_lua():
		free()
		return 
	
	id = lua_api.pull_variant('condition_id')
	name = lua_api.pull_variant('condition_name')
	description = lua_api.pull_variant('condition_hint')
	
	if !lua_api.function_exists('check_condition'):
		push_error("Can't load the lua: '", lua_script, "' - Their is no 'check_condition' function!")
		free()
		return
	
	lua_api.call_function("init", [])

# Function to check if the condition is met
# This function should be overridden in the child classes
# It should return true if the condition is met, and false if it's not
func check_condition(_character: Character) -> bool:
	
	return lua_api.call_function("check_condition", [_character])

func duplicate() -> BaseSkillCondition:
	
	var dupli: BaseSkillCondition = BaseSkillCondition.new(lua_script)
	
	dupli.id = id
	dupli.name = name
	dupli.description = description
	dupli.lua_api = lua_api
	dupli.lua_loader = lua_loader
	dupli.lua_script = lua_script
	dupli.exported_value = exported_value
	
	return dupli


func to_dictionary() -> Dictionary:
	
	var data: Dictionary = {
		"lua_script": lua_script,
		"exported_value": exported_value
	}
	
	return data

static func from_dictionary(data: Dictionary) -> BaseSkillCondition:
	
	var cond: BaseSkillCondition = BaseSkillCondition.new(data['lua_script'])
	cond.exported_value = data['exported_value']
	
	return cond

## LUA reserved Functions

func _lua_get_id() -> String:
	return id

func _lua_set_id(new_id: String):
	id = new_id

func _lua_get_name() -> String:
	return name

func _lua_set_name(new_name: String):
	name = new_name

func _lua_get_description() -> String:
	return description

func _lua_set_description(new_description: String):
	description = new_description

func _lua_add_export(_name: String, default: Variant, type: String, hint: String) -> bool:
	
	if _name == "":
		print("error")
		return false
	
	if exported_value.has(_name):
		print("error")
		return false
	
	if default == null:
		print("error")
		return false
	
	if type == "":
		print("error")
		return false
	
	if hint == "":
		print("error")
		return false
	
	exported_value[_name] = {
		"default": default,
		"type": type,
		"hint": hint
	}
	
	return true

func _lua_get_exporteds() -> Array:
	
	var exported_as_array = []
	
	for key in exported_value:
		exported_as_array.push_back(key)
	
	return exported_as_array

func _lua_get_export(_name: String) -> _c_lua_export:
	
	if _name == "":
		return _c_lua_export.new()
	
	if !exported_value.has(_name):
		return _c_lua_export.new()
	
	var data: Dictionary = exported_value.get(_name)
	var exported: _c_lua_export = _c_lua_export.new()
	
	exported.default = data['default']
	exported.hint = data['hint']
	exported.type = data['type']
	exported.value = data['value'] if data.has('value') else data['default']
	
	return exported

class _c_lua_export:
	var default: Variant = ""
	var type: String = ""
	var hint: String = ""
	var value: Variant = ""
